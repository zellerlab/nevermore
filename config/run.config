executor {
    $slurm {
        queueSize = 80
    }
    $local {
        cpus = 1
        memory = '4 GB'
    }
}

process {
    cache = "lenient"
    // use queue: all for LUMC or set to other slurm partitions
    queue = "all"
    // Use this on the EMBL cluster with paritions called htc-el8 or bigmem
    // queue = { (task.time <= 14.d && task.memory < 256.GB && (task.memory.div(task.cpus)) <= 4) ? "htc-el8" : "bigmem" }
	// a container specified here will overwrite the containers specified in the processes in the .nf files
    // containers can be built with singularity from singularity files in the nevermore repo
    // example: container = "oras://ghcr.io/cschu/nevermore@sha256:b83832ee9a88a8446ef1c6df9b091bb9725a04971b46e454b1d02d12b8d3f064"
	withName: prepare_fastqs {
		executor = "local"
		scratch = null
		container = null
	}
    withName: fastqc {
        executor = "slurm"
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) ? "retry" : "ignore"}
        cpus = 2
        memory = {4.GB * task.attempt}
        time = {4.h * task.attempt}
        maxRetries = 3
    }
    withName: multiqc {
        executor = "slurm"
        publishDir = [ path: params.output_dir ]
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) ? "retry" : "ignore"}
        cpus = 1
        memory = {4.GB * task.attempt}
        time = {4.h * task.attempt}
        maxRetries = 3
    }
    withName: flagstats {
        executor = "slurm"
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) "retry" : "ignore"}
        cpus = 2
        //memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
        memory = {2.GB * task.attempt}
        time = {4.h * task.attempt}
        maxRetries = 3
    }
    withLabel: kraken2 {
        executor = "slurm"
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) ? "retry" : "ignore"}
        cpus = 8
        memory = {64.GB * task.attempt}
        time = '5d'
        maxRetries = 3
    }
    withLabel: bbduk {
        executor = "slurm"
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) ? "retry" : "ignore"}
        cpus = 4
        memory = {8.GB * task.attempt}
        time = '2h'
        maxRetries = 3
    }
    withName: concat_singles {
        executor = "slurm"
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) ? "retry" : "ignore"}
        cpus = 1
        memory = '2.GB'
        time = '8h'
        maxRetries = 3
    }
    withLabel: align {
        executor = "slurm"
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) ? "retry" : "ignore"}
        cpus = 8
		// 16.GB for IGC, 128.GB for human-gut GMGC
        memory = {128.GB * task.attempt}
        time = '6d'
        maxRetries = 3
    }
    withLabel: samtools {
        executor = "slurm"
        publishDir = [ path: params.output_dir ]
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 3) ? "retry" : "ignore"}
        cpus = 8
		// 16.GB for IGC, 64.GB for human-gut GMGC
        memory = {64.GB * task.attempt}
        time = '5d'
        maxRetries = 3
    }
	withLabel: gffquant {
		// gffquant v2.16.5, samtools v1.13
		container = "docker://ghcr.io/cschu/gff_quantifier:v2.16.5"
		scratch = null	
        executor = "slurm"
        publishDir = [ path: params.output_dir ]
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 4) ? "retry" : "ignore"}
        cpus = 1
        memory = {32.GB * task.attempt}
        time = {2.d * task.attempt}
        maxRetries = 4
    }
    withName: collate_feature_counts {
		// gffquant v2.16.5, samtools v1.13
		container = "docker://ghcr.io/cschu/gff_quantifier:v2.16.5"		
		scratch = null
        executor = "slurm"
        publishDir = [ path: params.output_dir ]
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 4) ? "retry" : "ignore"}
        cpus = 1
        memory = {16.GB * task.attempt}
        time = {2.d * task.attempt}
        maxRetries = 4
    }
	withName: merge_single_fastqs {
        executor = "slurm"
	    errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 4) ? "retry" : "ignore"}
	    cpus = 1
	    memory = {32.GB * task.attempt}
	    time = {2.d * task.attempt}
	    maxRetries = 4
	}
    withName: collate_stats {
        errorStrategy = {(task.exitStatus in 137..140 && task.attempt <= 4) ? "retry" : "ignore"}
        maxRetries = 4
        memory = {32.GB * task.attempt}
        time = {1.d * task.attempt}
        cpus = 1
    }
}

singularity {
    enabled = true
    autoMounts = true
}
